# Load the shiny package#
library(shiny)#
library(ggplot2)#
library(readxl)#
library(dplyr)#
#
# Define the URL for the Excel file#
url <- "https://github.com/SeanJibowu555/2358839DataVisualisation-repository/blob/ae5ce13362e7f5fa9317d7e18fe285ee2173f3a3/Sleep_Efficiency_Updated.xls"#
#
# Download and read the Excel file#
temp_file <- tempfile(fileext = ".xls")#
download.file(url, temp_file, mode = "wb")#
data <- read_excel(temp_file, sheet = "Sleep_Efficiency_Updated")#
#
if (!exists("data") || !is.data.frame(data)) {#
  stop("Data failed to load. Please check the file and URL.")#
}#
# Define the UI#
ui <- fluidPage(#
  titlePanel("Sleep Data Analysis"),#
  sidebarLayout(#
    sidebarPanel(),#
    mainPanel(#
      tabsetPanel(#
        tabPanel("Question 1", plotOutput("plot1")),#
        tabPanel("Question 2", plotOutput("plot2")),#
        tabPanel("Question 3", plotOutput("plot3")),#
        tabPanel("Question 4", plotOutput("plot4"))#
      )#
    )#
  )#
)#
#
# Define the server logic#
server <- function(input, output) {#
  # Render the plot for Question 1#
  output$plot1 <- renderPlot({#
    ggplot(data, aes(x = SmokingStatus, y = SleepDuration)) +#
      geom_boxplot() +#
      labs(title = "Sleep Duration by Smoking Status", x = "Smoking Status", y = "Sleep Duration")#
  })#
  # Render the plot for Question 2#
  output$plot2 <- renderPlot({#
    par(mfrow = c(1, 2))  # Arrange two plots side by side#
    # Plot 1: Age vs Sleep Duration#
    plot(data$Age, data$SleepDuration, #
         main = "Age vs Sleep Duration", #
         xlab = "Age", ylab = "Sleep Duration", #
         col = "blue", pch = 19)#
    model1 <- lm(SleepDuration ~ Age, data = data)#
    abline(model1, col = "red", lwd = 2)#
    # Plot 2: Age vs SleepEfficiency#
    plot(data$Age, data$SleepEfficiency, #
         main = "Age vs Sleep Efficiency", #
         xlab = "Age", ylab = "Sleep Efficiency", #
         col = "blue", pch = 19)#
    model2 <- lm(SleepEfficiency ~ Age, data = data)#
    abline(model2, col = "red", lwd = 2)#
  })#
  # Render the plot for Question 3#
  output$plot3 <- renderPlot({#
    ggplot(data, aes(x = Gender, y = SleepEfficiency, fill = Gender)) +#
      geom_bar(stat = "identity") +#
      labs(title = "Average Sleep Efficiency by Gender", x = "Gender", y = "Average Sleep Efficiency") +#
      theme_minimal()#
  })#
  # Render the plot for Question 4#
  output$plot4 <- renderPlot({#
    par(mfrow = c(1, 2))  # Arrange two plots side by side#
    # Plot 1: Alcohol Consumption & Exercise Frequency vs Sleep Efficiency#
    plot(data$AverageAlcoholConsumption, data$SleepEfficiency, #
         main = "Alcohol Consumption vs Sleep Efficiency", #
         xlab = "Average Alcohol Consumption", ylab = "Sleep Efficiency", #
         col = "green", pch = 19)#
    model3 <- lm(SleepEfficiency ~ AverageAlcoholConsumption, data = data)#
    abline(model3, col = "red", lwd = 2)#
    plot(data$ExerciseFrequency, data$SleepEfficiency, #
         main = "Exercise Frequency vs Sleep Efficiency", #
         xlab = "Average Exercise Frequency", ylab = "Sleep Efficiency", #
         col = "purple#
    model4 <- lm(SleepEfficiency ~ ExerciseFrequency, data = data)#
    abline(model4, col = "red", lwd = 2)#
    # Plot 2: Sleep Duration & Caffeine Consumption vs Sleep Efficiency#
    plot(data$SleepDuration, data$SleepEfficiency, #
         main = "Sleep Duration vs Sleep Efficiency", #
         xlab = "Sleep Duration", ylab = "Sleep Efficiency", #
         col = "orange", pch = 19)#
    model5 <- lm(SleepEfficiency ~ SleepDuration, data = data)#
    abline(model5, col = "red", lwd = 2)#
    plot(data$CaffeineConsumption, data$SleepEfficiency, #
         main = "Caffeine Consumption vs Sleep Efficiency", #
         xlab = "Average Caffeine Consumption", ylab = "Sleep Efficiency", #
         col = "brown", pch = 19)#
    model6 <- lm(SleepEfficiency ~ CaffeineConsumption, data = data)#
    abline(model6, col = "red", lwd = 2)#
  })#
}#
#
# Create Shiny app#
shinyApp(ui = ui, server = server)
# Load the shiny package#
library(shiny)#
library(ggplot2)#
library(readxl)#
library(dplyr)#
#
# Define the URL for the Excel file#
url <- "https://github.com/SeanJibowu555/2358839DataVisualisation-repository/blob/6485783f2278e66ee066041de5d6cf02f26ccd0e/Sleep_Efficiency_Updated.xls"#
#
# Download and read the Excel file#
temp_file <- tempfile(fileext = ".xls")#
download.file(url, temp_file, mode = "wb")#
data <- read_excel(temp_file, sheet = "Sleep_Efficiency_Updated")#
#
if (!exists("data") || !is.data.frame(data)) {#
  stop("Data failed to load. Please check the file and URL.")#
}#
# Define the UI#
ui <- fluidPage(#
  titlePanel("Sleep Data Analysis"),#
  sidebarLayout(#
    sidebarPanel(),#
    mainPanel(#
      tabsetPanel(#
        tabPanel("Question 1", plotOutput("plot1")),#
        tabPanel("Question 2", plotOutput("plot2")),#
        tabPanel("Question 3", plotOutput("plot3")),#
        tabPanel("Question 4", plotOutput("plot4"))#
      )#
    )#
  )#
)#
#
# Define the server logic#
server <- function(input, output) {#
  # Render the plot for Question 1#
  output$plot1 <- renderPlot({#
    ggplot(data, aes(x = SmokingStatus, y = SleepDuration)) +#
      geom_boxplot() +#
      labs(title = "Sleep Duration by Smoking Status", x = "Smoking Status", y = "Sleep Duration")#
  })#
  # Render the plot for Question 2#
  output$plot2 <- renderPlot({#
    par(mfrow = c(1, 2))  # Arrange two plots side by side#
    # Plot 1: Age vs Sleep Duration#
    plot(data$Age, data$SleepDuration, #
         main = "Age vs Sleep Duration", #
         xlab = "Age", ylab = "Sleep Duration", #
         col = "blue", pch = 19)#
    model1 <- lm(SleepDuration ~ Age, data = data)#
    abline(model1, col = "red", lwd = 2)#
    # Plot 2: Age vs SleepEfficiency#
    plot(data$Age, data$SleepEfficiency, #
         main = "Age vs Sleep Efficiency", #
         xlab = "Age", ylab = "Sleep Efficiency", #
         col = "blue", pch = 19)#
    model2 <- lm(SleepEfficiency ~ Age, data = data)#
    abline(model2, col = "red", lwd = 2)#
  })#
  # Render the plot for Question 3#
  output$plot3 <- renderPlot({#
    ggplot(data, aes(x = Gender, y = SleepEfficiency, fill = Gender)) +#
      geom_bar(stat = "identity") +#
      labs(title = "Average Sleep Efficiency by Gender", x = "Gender", y = "Average Sleep Efficiency") +#
      theme_minimal()#
  })#
  # Render the plot for Question 4#
  output$plot4 <- renderPlot({#
    par(mfrow = c(1, 2))  # Arrange two plots side by side#
    # Plot 1: Alcohol Consumption & Exercise Frequency vs Sleep Efficiency#
    plot(data$AverageAlcoholConsumption, data$SleepEfficiency, #
         main = "Alcohol Consumption vs Sleep Efficiency", #
         xlab = "Average Alcohol Consumption", ylab = "Sleep Efficiency", #
         col = "green", pch = 19)#
    model3 <- lm(SleepEfficiency ~ AverageAlcoholConsumption, data = data)#
    abline(model3, col = "red", lwd = 2)#
    plot(data$ExerciseFrequency, data$SleepEfficiency, #
         main = "Exercise Frequency vs Sleep Efficiency", #
         xlab = "Average Exercise Frequency", ylab = "Sleep Efficiency", #
         col = "purple#
    model4 <- lm(SleepEfficiency ~ ExerciseFrequency, data = data)#
    abline(model4, col = "red", lwd = 2)#
    # Plot 2: Sleep Duration & Caffeine Consumption vs Sleep Efficiency#
    plot(data$SleepDuration, data$SleepEfficiency, #
         main = "Sleep Duration vs Sleep Efficiency", #
         xlab = "Sleep Duration", ylab = "Sleep Efficiency", #
         col = "orange", pch = 19)#
    model5 <- lm(SleepEfficiency ~ SleepDuration, data = data)#
    abline(model5, col = "red", lwd = 2)#
    plot(data$CaffeineConsumption, data$SleepEfficiency, #
         main = "Caffeine Consumption vs Sleep Efficiency", #
         xlab = "Average Caffeine Consumption", ylab = "Sleep Efficiency", #
         col = "brown", pch = 19)#
    model6 <- lm(SleepEfficiency ~ CaffeineConsumption, data = data)#
    abline(model6, col = "red", lwd = 2)#
  })#
}#
#
# Create Shiny app#
shinyApp(ui = ui, server = server)
# Load the shiny package#
library(shiny)#
library(ggplot2)#
library(readxl)#
library(dplyr)#
#
# Define the URL for the Excel file#
url <- "https://github.com/SeanJibowu555/2358839DataVisualisation-repository/blob/c5754733ede1d5206acf65e2389f01a8e64393f8/Sleep_Efficiency_Updated.xls"#
#
# Download and read the Excel file#
temp_file <- tempfile(fileext = ".xls")#
download.file(url, temp_file, mode = "wb")#
data <- read_excel(temp_file, sheet = "Sleep_Efficiency_Updated")#
#
if (!exists("data") || !is.data.frame(data)) {#
  stop("Data failed to load. Please check the file and URL.")#
}#
# Define the UI#
ui <- fluidPage(#
  titlePanel("Sleep Data Analysis"),#
  sidebarLayout(#
    sidebarPanel(),#
    mainPanel(#
      tabsetPanel(#
        tabPanel("Question 1", plotOutput("plot1")),#
        tabPanel("Question 2", plotOutput("plot2")),#
        tabPanel("Question 3", plotOutput("plot3")),#
        tabPanel("Question 4", plotOutput("plot4"))#
      )#
    )#
  )#
)#
#
# Define the server logic#
server <- function(input, output) {#
  # Render the plot for Question 1#
  output$plot1 <- renderPlot({#
    ggplot(data, aes(x = SmokingStatus, y = SleepDuration)) +#
      geom_boxplot() +#
      labs(title = "Sleep Duration by Smoking Status", x = "Smoking Status", y = "Sleep Duration")#
  })#
  # Render the plot for Question 2#
  output$plot2 <- renderPlot({#
    par(mfrow = c(1, 2))  # Arrange two plots side by side#
    # Plot 1: Age vs Sleep Duration#
    plot(data$Age, data$SleepDuration, #
         main = "Age vs Sleep Duration", #
         xlab = "Age", ylab = "Sleep Duration", #
         col = "blue", pch = 19)#
    model1 <- lm(SleepDuration ~ Age, data = data)#
    abline(model1, col = "red", lwd = 2)#
    # Plot 2: Age vs SleepEfficiency#
    plot(data$Age, data$SleepEfficiency, #
         main = "Age vs Sleep Efficiency", #
         xlab = "Age", ylab = "Sleep Efficiency", #
         col = "blue", pch = 19)#
    model2 <- lm(SleepEfficiency ~ Age, data = data)#
    abline(model2, col = "red", lwd = 2)#
  })#
  # Render the plot for Question 3#
  output$plot3 <- renderPlot({#
    ggplot(data, aes(x = Gender, y = SleepEfficiency, fill = Gender)) +#
      geom_bar(stat = "identity") +#
      labs(title = "Average Sleep Efficiency by Gender", x = "Gender", y = "Average Sleep Efficiency") +#
      theme_minimal()#
  })#
  # Render the plot for Question 4#
  output$plot4 <- renderPlot({#
    par(mfrow = c(1, 2))  # Arrange two plots side by side#
    # Plot 1: Alcohol Consumption & Exercise Frequency vs Sleep Efficiency#
    plot(data$AverageAlcoholConsumption, data$SleepEfficiency, #
         main = "Alcohol Consumption vs Sleep Efficiency", #
         xlab = "Average Alcohol Consumption", ylab = "Sleep Efficiency", #
         col = "green", pch = 19)#
    model3 <- lm(SleepEfficiency ~ AverageAlcoholConsumption, data = data)#
    abline(model3, col = "red", lwd = 2)#
    plot(data$ExerciseFrequency, data$SleepEfficiency, #
         main = "Exercise Frequency vs Sleep Efficiency", #
         xlab = "Average Exercise Frequency", ylab = "Sleep Efficiency", #
         col = "purple#
    model4 <- lm(SleepEfficiency ~ ExerciseFrequency, data = data)#
    abline(model4, col = "red", lwd = 2)#
    # Plot 2: Sleep Duration & Caffeine Consumption vs Sleep Efficiency#
    plot(data$SleepDuration, data$SleepEfficiency, #
         main = "Sleep Duration vs Sleep Efficiency", #
         xlab = "Sleep Duration", ylab = "Sleep Efficiency", #
         col = "orange", pch = 19)#
    model5 <- lm(SleepEfficiency ~ SleepDuration, data = data)#
    abline(model5, col = "red", lwd = 2)#
    plot(data$CaffeineConsumption, data$SleepEfficiency, #
         main = "Caffeine Consumption vs Sleep Efficiency", #
         xlab = "Average Caffeine Consumption", ylab = "Sleep Efficiency", #
         col = "brown", pch = 19)#
    model6 <- lm(SleepEfficiency ~ CaffeineConsumption, data = data)#
    abline(model6, col = "red", lwd = 2)#
  })#
}#
#
# Create Shiny app#
shinyApp(ui = ui, server = server)
# Load the shiny package#
library(shiny)#
library(ggplot2)#
library(readxl)#
library(dplyr)#
#
# Define the URL for the Excel file#
url <- "https://github.com/SeanJibowu555/2358839DataVisualisation-repository/blob/c5754733ede1d5206acf65e2389f01a8e64393f8/Sleep_Efficiency_Updated.xls"#
#
# Download and read the Excel file#
temp_file <- tempfile(fileext = ".xls")#
download.file(url, temp_file, mode = "wb")#
data <- read_excel(temp_file, sheet = "Sleep_Efficiency_Updated")#
#
# Inspect the temporary file manually#
browseURL(temp_file)#
#
# Attempt to read the Excel file#
data <- tryCatch(#
  read_excel(temp_file, sheet = "Sleep_Efficiency_Updated"),#
  error = function(e) {#
    message("Error reading file: ", e$message)#
    return(NULL)#
  }#
)#
#
# Check if data is loaded successfully#
if (is.null(data) || !is.data.frame(data)) {#
  stop("Data failed to load. Please check the file and URL.")#
}
# Define the URL for the raw file and download the file#
url <- "https://raw.githubusercontent.com/SeanJibowu555/2358839DataVisualisation-repository/ae5ce13362e7f5fa9317d7e18fe285ee2173f3a3/Sleep_Efficiency_Updated.xls"#
temp_file <- tempfile(fileext = ".xls")#
download.file(url, temp_file, mode = "wb")#
#
# Attempt to read the Excel file#
data <- tryCatch(#
  read_excel(temp_file, sheet = "Sleep_Efficiency_Updated"),#
  error = function(e) {#
    message("Error reading file: ", e$message)#
    return(NULL)#
  }#
)#
#
# Check if data is loaded successfully#
if (is.null(data) || !is.data.frame(data)) {#
  stop("Data failed to load. Please check the file and URL.")#
}
#install.packages("rsconnect", repos = "https://cran.r-project.org")#
#
library(rsconnect)#
rsconnect::setAccountInfo(name='seanjibowu', token='865698C544BFEA82653A7A18EB9C6317', secret='WKWY0YCktuPF4vbJS9v7Qv/UA2QEA4iT1m/Sj7zs')#
#
rsconnect::deployApp('Users/seanjibowu/2358839DataVisualisationrepository')
#install.packages("rsconnect", repos = "https://cran.r-project.org")#
#
library(rsconnect)#
rsconnect::setAccountInfo(name='seanjibowu', token='865698C544BFEA82653A7A18EB9C6317', secret='WKWY0YCktuPF4vbJS9v7Qv/UA2QEA4iT1m/Sj7zs')#
#
rsconnect::deployApp(#
  appDir = "https://github.com/SeanJibowu555/2358839DataVisualisation-repository",#
  appName = "SleepDataAnalysisApp",#
  appFiles = c("283359ShinyImplementation.R", "Sleep_Efficiency_Updated.xls"), # Include necessary files#
  account = "seanjibowu"#
)
#install.packages("rsconnect", repos = "https://cran.r-project.org")#
#
library(rsconnect)#
rsconnect::setAccountInfo(name='seanjibowu', token='865698C544BFEA82653A7A18EB9C6317', secret='WKWY0YCktuPF4vbJS9v7Qv/UA2QEA4iT1m/Sj7zs')#
#
rsconnect::deployApp(#
  account = "seanjibowu",#
  repo = "SeanJibowu555/2358839DataVisualisation-repository",#
  branch = "main", # or the branch you want to deploy from#
  appFiles = c("283359ShinyImplementation.R", "Sleep_Efficiency_Updated.xls"),#
  appName = "SleepDataAnalysisApp"#
)
#install.packages("rsconnect", repos = "https://cran.r-project.org")#
#
library(rsconnect)#
rsconnect::setAccountInfo(name='seanjibowu', token='865698C544BFEA82653A7A18EB9C6317', secret='WKWY0YCktuPF4vbJS9v7Qv/UA2QEA4iT1m/Sj7zs')#
#
rsconnect::deployApp(#
  account = "seanjibowu",#
  repo = "https://github.com/SeanJibowu555/2358839DataVisualisation-repository.git",#
  branch = "main", # or the branch you want to deploy from#
  appFiles = c("283359ShinyImplementation.R", "Sleep_Efficiency_Updated.xls"),#
  appName = "SleepDataAnalysisApp"#
)
# Load necessary libraries#
library(shiny)#
library(ggplot2)#
library(readxl)#
library(dplyr)#
library(gridExtra)#
# Define the URL for the raw file and download the file#
url <- "https://raw.githubusercontent.com/SeanJibowu555/2358839DataVisualisation-repository/ae5ce13362e7f5fa9317d7e18fe285ee2173f3a3/Sleep_Efficiency_Updated.xls"#
temp_file <- tempfile(fileext = ".xls")#
download.file(url, temp_file, mode = "wb")#
#
# Attempt to read the Excel file#
data <- tryCatch(#
  read_excel(temp_file, sheet = "Sleep_Efficiency_Updated"),#
  error = function(e) {#
    message("Error reading file: ", e$message)#
    return(NULL)#
  }#
)#
#
# Check if data is loaded successfully#
if (is.null(data) || !is.data.frame(data)) {#
  stop("Data failed to load. Please check the file and URL.")#
}#
#
# Calculate the averages and add them as new columns#
data <- data %>%#
  mutate(#
    Average_Alcohol_Consumption = mean(`Alcohol consumption`, na.rm = TRUE),#
    Average_Sleep_Duration = mean(`Sleep duration`, na.rm = TRUE),#
    Average_Sleep_Efficiency = mean(`Sleep efficiency`, na.rm = TRUE),#
    Average_Caffeine_Consumption = mean(`Caffeine consumption`, na.rm = TRUE),#
    Average_Exercise_Frequency = mean(`Exercise frequency`, na.rm = TRUE)#
  )#
#
# Define the UI#
ui <- fluidPage(#
  titlePanel("Sleep Data Analysis"),#
  sidebarLayout(#
    sidebarPanel(#
      h4("Correlation Coefficient from R²:"),#
      p("The correlation coefficient (r) can be found using the formula r = sqrt(R²) if R² is positive. For a negative R², r = -sqrt(abs(R²))."),#
      sliderInput("ageFilter", "Filter by Age:", min = min(data$Age, na.rm = TRUE), max = max(data$Age, na.rm = TRUE), value = c(min(data$Age, na.rm = TRUE), max(data$Age, na.rm = TRUE))),#
      radioButtons("smokingFilter", "Toggle Smoking Status:", choices = c("All", "Non-Smokers", "Smokers"), selected = "All")#
    ),#
    mainPanel(#
      tabsetPanel(#
        tabPanel("Question 1", plotOutput("plot1")),#
        tabPanel("Question 2", plotOutput("plot2")),#
        tabPanel("Question 3", plotOutput("plot3")),#
        tabPanel("Question 4", plotOutput("plot4")),#
        tabPanel("Dashboard", #
                 plotOutput("dashboard"), #
                 div(style = "text-align: right; margin-top: 10px;", actionButton("nextPlot", "Next Plot"))#
        ),#
        tabPanel("Summary", verbatimTextOutput("summary")),#
        tabPanel("Data Table", tableOutput("table"))#
      )#
    )#
  )#
)#
#
# Define the server logic#
server <- function(input, output, session) {#
  # Filter data based on smoking status input#
  filtered_data <- reactive({#
    filtered <- data#
    if (input$smokingFilter == "Non-Smokers") {#
      filtered <- filtered %>% filter(`Smoking status` == "No")#
    } else if (input$smokingFilter == "Smokers") {#
      filtered <- filtered %>% filter(`Smoking status` == "Yes")#
    }#
    filtered#
  })#
  # Filter data for Question 1#
  filtered_data_q1 <- reactive({#
    data %>% filter(Age >= input$ageFilter[1] & Age <= input$ageFilter[2])#
  })#
  # Render the plot for Question 1#
  output$plot1 <- renderPlot({#
    ggplot(filtered_data_q1(), aes(x = `Smoking status`, y = `Sleep duration`, fill = `Smoking status`)) +#
      geom_boxplot() +#
      stat_summary(fun = median, geom = "point", shape = 23, size = 3, fill = "white") +#
      geom_text(#
        stat = "summary",#
        fun.y = median,#
        aes(label = round(..y.., 2)),#
        vjust = -0.5,#
        color = c("white", "black")#
      ) +#
      labs(title = "Sleep Duration by Smoking Status", x = "Smoking Status", y = "Sleep Duration") +#
      theme_minimal() +#
      scale_fill_manual(values = c("No" = "blue", "Yes" = "red"))#
  })#
  # Render the plot for Question 2#
  output$plot2 <- renderPlot({#
    ggplot(filtered_data(), aes(x = Age, y = `Sleep duration`)) +#
      geom_point(color = "blue") +#
      geom_smooth(method = "lm", color = "red") +#
      labs(title = "Age vs Sleep Duration", x = "Age", y = "Sleep Duration") +#
      theme_minimal() +#
      annotate("text", x = Inf, y = Inf, label = paste0("R^2 = ", format(summary(lm(`Sleep duration` ~ Age, data = filtered_data()))$r.squared, digits = 7)), hjust = 1.1, vjust = 1.5)#
  })#
  # Render the plot for Question 3#
  output$plot3 <- renderPlot({#
    gender_avg <- filtered_data() %>%#
      group_by(Gender) %>%#
      summarise(Average_Sleep_Efficiency = mean(`Sleep efficiency`, na.rm = TRUE))#
    ggplot(gender_avg, aes(x = Gender, y = Average_Sleep_Efficiency, fill = Gender)) +#
      geom_bar(stat = "identity") +#
      geom_text(aes(label = round(Average_Sleep_Efficiency, 2)), vjust = -0.5) +#
      labs(title = "Average Sleep Efficiency by Gender", x = "Gender", y = "Average Sleep Efficiency") +#
      theme_minimal() +#
      scale_fill_manual(values = c("Male" = "skyblue", "Female" = "pink"))#
  })#
  # Track the current plot index for the Dashboard#
  plotIndex <- reactiveVal(1)#
  # Update the plot index when the next plot button is clicked#
  observeEvent(input$nextPlot, {#
    plotIndex((plotIndex() %% 4) + 1)#
  })#
  # Render the plot for Question 4#
  output$plot4 <- renderPlot({#
    par(mfrow = c(2, 2))#
    plot(filtered_data()$`Alcohol consumption`, filtered_data()$`Sleep efficiency`, #
         main = "Alcohol Consumption vs Sleep Efficiency", #
         xlab = "Alcohol Consumption", ylab = "Sleep Efficiency", #
         col = "green", pch = 19)#
    model3 <- lm(`Sleep efficiency` ~ `Alcohol consumption`, data = filtered_data())#
    abline(model3, col = "red", lwd = 2)#
    legend("topright", legend = paste("R^2 =", format(summary(model3)$r.squared, digits = 7)), bty = "n")#
    plot(filtered_data()$`Exercise frequency`, filtered_data()$`Sleep efficiency`, #
         main = "Exercise Frequency vs Sleep Efficiency", #
         xlab = "Exercise Frequency", ylab = "Sleep Efficiency", #
         col = "purple", pch = 19)#
    model4 <- lm(`Sleep efficiency` ~ `Exercise frequency`, data = filtered_data())#
    abline(model4, col = "red", lwd = 2)#
    legend("topright", legend = paste("R^2 =", format(summary(model4)$r.squared, digits = 7)), bty = "n")#
    plot(filtered_data()$`Sleep duration`, filtered_data()$`Sleep efficiency`, #
         main = "Sleep Duration vs Sleep Efficiency", #
         xlab = "Sleep Duration", ylab = "Sleep Efficiency", #
         col = "orange", pch = 19)#
    model5 <- lm(`Sleep efficiency` ~ `Sleep duration`, data = filtered_data())#
    abline(model5, col = "red", lwd = 2)#
    legend("topright", legend = paste("R^2 =", format(summary(model5)$r.squared, digits = 7)), bty = "n")#
    plot(filtered_data()$`Caffeine consumption`, filtered_data()$`Sleep efficiency`, #
         main = "Caffeine Consumption vs Sleep Efficiency", #
         xlab = "Caffeine Consumption", ylab = "Sleep Efficiency", #
         col = "brown", pch = 19)#
    model6 <- lm(`Sleep efficiency` ~ `Caffeine consumption`, data = filtered_data())#
    abline(model6, col = "red", lwd = 2)#
    legend("topright", legend = paste("R^2 =", format(summary(model6)$r.squared, digits = 7)), bty = "n")#
  })#
  # Render the dashboard plot based on the current plot index#
  output$dashboard <- renderPlot({#
    # Question 1: Sleep Duration by Smoking Status#
    p1 <- ggplot(filtered_data_q1(), aes(x = `Smoking status`, y = `Sleep duration`, fill = `Smoking status`)) +#
      geom_boxplot() +#
      stat_summary(fun = median, geom = "point", shape = 23, size = 3, fill = "white") +#
      geom_text(#
        stat = "summary",#
        fun.y = median,#
        aes(label = round(..y.., 2)),#
        vjust = -0.5,#
        color = c("white", "black")#
      ) +#
      labs(title = "Sleep Duration by Smoking Status", x = "Smoking Status", y = "Sleep Duration") +#
      theme_minimal() +#
      scale_fill_manual(values = c("No" = "blue", "Yes" = "red"))#
    # Question 2: Age vs Sleep Duration#
    p2 <- ggplot(filtered_data(), aes(x = Age, y = `Sleep duration`)) +#
      geom_point(color = "blue") +#
      geom_smooth(method = "lm", color = "red") +#
      labs(title = "Age vs Sleep Duration", x = "Age", y = "Sleep Duration") +#
      theme_minimal() +#
      annotate("text", x = Inf, y = Inf, label = paste0("R^2 = ", format(summary(lm(`Sleep duration` ~ Age, data = filtered_data()))$r.squared, digits = 7)), hjust = 1.1, vjust = 1.5)#
    # Question 3: Average Sleep Efficiency by Gender#
    gender_avg <- filtered_data() %>%#
      group_by(Gender) %>%#
      summarise(Average_Sleep_Efficiency = mean(`Sleep efficiency`, na.rm = TRUE))#
    p3 <- ggplot(gender_avg, aes(x = Gender, y = Average_Sleep_Efficiency, fill = Gender)) +#
      geom_bar(stat = "identity") +#
      geom_text(aes(label = round(Average_Sleep_Efficiency, 2)), vjust = -0.5) +#
      labs(title = "Average Sleep Efficiency by Gender", x = "Gender", y = "Average Sleep Efficiency") +#
      theme_minimal() +#
      scale_fill_manual(values = c("Male" = "skyblue", "Female" = "pink"))#
    # Question 4 plots based on the current plot index#
    p4 <- NULL#
    if (plotIndex() == 1) {#
      p4 <- ggplot(filtered_data(), aes(x = `Alcohol consumption`, y = `Sleep efficiency`)) +#
        geom_point(color = "green") +#
        geom_smooth(method = "lm", color = "red") +#
        labs(title = "Alcohol Consumption vs Sleep Efficiency", x = "Alcohol Consumption", y = "Sleep Efficiency") +#
        theme_minimal() +#
        annotate("text", x = Inf, y = Inf, label = paste0("R^2 = ", format(summary(lm(`Sleep efficiency` ~ `Alcohol consumption`, data = filtered_data()))$r.squared, digits = 7)), hjust = 1.1, vjust = 1.5)#
    } else if (plotIndex() == 2) {#
      p4 <- ggplot(filtered_data(), aes(x = `Exercise frequency`, y = `Sleep efficiency`)) +#
        geom_point(color = "purple") +#
        geom_smooth(method = "lm", color = "red") +#
        labs(title = "Exercise Frequency vs Sleep Efficiency", x = "Exercise Frequency", y = "Sleep Efficiency") +#
        theme_minimal() +#
        annotate("text", x = Inf, y = Inf, label = paste0("R^2 = ", format(summary(lm(`Sleep efficiency` ~ `Exercise frequency`, data = filtered_data()))$r.squared, digits = 7)), hjust = 1.1, vjust = 1.5)#
    } else if (plotIndex() == 3) {#
      p4 <- ggplot(filtered_data(), aes(x = `Sleep duration`, y = `Sleep efficiency`)) +#
        geom_point(color = "orange") +#
        geom_smooth(method = "lm", color = "red") +#
        labs(title = "Sleep Duration vs Sleep Efficiency", x = "Sleep Duration", y = "Sleep Efficiency") +#
        theme_minimal() +#
        annotate("text", x = Inf, y = Inf, label = paste0("R^2 = ", format(summary(lm(`Sleep efficiency` ~ `Sleep duration`, data = filtered_data()))$r.squared, digits = 7)), hjust = 1.1, vjust = 1.5)#
    } else if (plotIndex() == 4) {#
      p4 <- ggplot(filtered_data(), aes(x = `Caffeine consumption`, y = `Sleep efficiency`)) +#
        geom_point(color = "brown") +#
        geom_smooth(method = "lm", color = "red") +#
        labs(title = "Caffeine Consumption vs Sleep Efficiency", x = "Caffeine Consumption", y = "Sleep Efficiency") +#
        theme_minimal() +#
        annotate("text", x = Inf, y = Inf, label = paste0("R^2 = ", format(summary(lm(`Sleep efficiency` ~ `Caffeine consumption`, data = filtered_data()))$r.squared, digits = 7)), hjust = 1.1, vjust = 1.5)#
    }#
    gridExtra::grid.arrange(p1, p2, p3, p4, ncol = 2)#
  })#
  # Render the summary of the data#
  output$summary <- renderPrint({#
    summary(filtered_data())#
  })#
  # Render the data table#
  output$table <- renderTable({#
    filtered_data()#
  })#
}#
#
# Create Shiny app#
shinyApp(ui = ui, server = server)
